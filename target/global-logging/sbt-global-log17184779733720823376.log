[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\udbha\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\udbha\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.1 (Oracle Corporation Java 11.0.7)
[debug]       Load.loadUnit: plugins took 102.6473ms
[debug]       Load.loadUnit: defsScala took 0.3575ms
[debug] [Loading] Scanning directory C:\Users\udbha\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\udbha\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 22.3026 ms
[debug]           Load.resolveProject(global-plugins) took 40.9103ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\udbha\.sbt\1.0\plugins, plugins: List(<none>))) took 93.7712ms
[debug] [Loading] Done in C:\Users\udbha\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 121.0635ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2529ms
[debug]     Load.loadUnit(file:/C:/Users/udbha/.sbt/1.0/plugins/, ...) took 233.3123ms
[debug]   Load.apply: load took 397.0374ms
[debug]   Load.apply: resolveProjects took 8.0198ms
[debug]   Load.apply: finalTransforms took 61.491ms
[debug]   Load.apply: config.delegates took 5.5791ms
[debug]   Load.apply: Def.make(settings)... took 685.0983ms
[debug]   Load.apply: structureIndex took 84.769ms
[debug]   Load.apply: mkStreams took 1.436ms
[info] loading global plugins from C:\Users\udbha\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2530.3641ms
[debug]           Load.loadUnit: plugins took 23.7544ms
[debug]           Load.loadUnit: defsScala took 0.0035ms
[debug] [Loading] Scanning directory C:\Users\udbha\Downloads\Tokenizing-Text-in-Spark-main\project
[debug]             Load.loadUnit: mkEval took 5.3736ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\udbha\Downloads\Tokenizing-Text-in-Spark-main\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.8794 ms
[info] loading settings for project tokenizing-text-in-spark-main-build from assembly.sbt,idea.sbt ...
[debug]               Load.resolveProject(tokenizing-text-in-spark-main-build) took 8.3609ms
[debug]             Load.loadTransitive: finalizeProject(Project(id tokenizing-text-in-spark-main-build, base: C:\Users\udbha\Downloads\Tokenizing-Text-in-Spark-main\project, plugins: List(<none>))) took 10.7718ms
[debug] [Loading] Done in C:\Users\udbha\Downloads\Tokenizing-Text-in-Spark-main\project, returning: (tokenizing-text-in-spark-main-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2167.5047ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.7746ms
[debug]         Load.loadUnit(file:/C:/Users/udbha/Downloads/Tokenizing-Text-in-Spark-main/project/, ...) took 2195.7786ms
[debug]       Load.apply: load took 2197.2266ms
[debug]       Load.apply: resolveProjects took 0.087ms
[debug]       Load.apply: finalTransforms took 8.0369ms
[debug]       Load.apply: config.delegates took 0.3333ms
[debug]       Load.apply: Def.make(settings)... took 79.6322ms
[debug]       Load.apply: structureIndex took 25.4184ms
[debug]       Load.apply: mkStreams took 0.0025ms
[info] loading project definition from C:\Users\udbha\Downloads\Tokenizing-Text-in-Spark-main\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 4244.7882ms
[debug]     Load.loadUnit: defsScala took 0.0019ms
[debug] [Loading] Scanning directory C:\Users\udbha\Downloads\Tokenizing-Text-in-Spark-main
[debug]       Load.loadUnit: mkEval took 0.1605ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\udbha\Downloads\Tokenizing-Text-in-Spark-main, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbtassembly.AssemblyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbtassembly.AssemblyPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,sbtassembly.AssemblyPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 0.9839 ms
[info] loading settings for project tokenizing-text-in-spark-main from build.sbt ...
[debug]         Load.resolveProject(tokenizing-text-in-spark-main) took 22.4955ms
[debug]       Load.loadTransitive: finalizeProject(Project(id tokenizing-text-in-spark-main, base: C:\Users\udbha\Downloads\Tokenizing-Text-in-Spark-main, plugins: List(<none>))) took 24.3056ms
[debug] [Loading] Done in C:\Users\udbha\Downloads\Tokenizing-Text-in-Spark-main, returning: (tokenizing-text-in-spark-main)
[debug]     Load.loadUnit: loadedProjectsRaw took 1826.6554ms
[debug]     Load.loadUnit: cleanEvalClasses took 20.5851ms
[debug]   Load.loadUnit(file:/C:/Users/udbha/Downloads/Tokenizing-Text-in-Spark-main/, ...) took 6092.5892ms
[debug] Load.apply: load took 6094.0509ms
[debug] Load.apply: resolveProjects took 0.1485ms
[debug] Load.apply: finalTransforms took 19.8106ms
[debug] Load.apply: config.delegates took 0.3215ms
[debug] Load.apply: Def.make(settings)... took 43.423ms
[debug] Load.apply: structureIndex took 15.8212ms
[debug] Load.apply: mkStreams took 0.0021ms
[info] set current project to Tokenizing_Text_in_Spark (in build file:/C:/Users/udbha/Downloads/Tokenizing-Text-in-Spark-main/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 58198 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 58198, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Tokenizing_Text_in_Spark (in build file:/C:/Users/udbha/Downloads/Tokenizing-Text-in-Spark-main/)
[debug] > Exec(idea-shell, None, None)
