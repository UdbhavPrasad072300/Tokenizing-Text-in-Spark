[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\udbha\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\udbha\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.1 (Oracle Corporation Java 11.0.7)
[debug]       Load.loadUnit: plugins took 145.2988ms
[debug]       Load.loadUnit: defsScala took 0.2306ms
[debug] [Loading] Scanning directory C:\Users\udbha\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\udbha\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 17.6748 ms
[debug]           Load.resolveProject(global-plugins) took 56.7695ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\udbha\.sbt\1.0\plugins, plugins: List(<none>))) took 101.4474ms
[debug] [Loading] Done in C:\Users\udbha\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 149.9197ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1926ms
[debug]     Load.loadUnit(file:/C:/Users/udbha/.sbt/1.0/plugins/, ...) took 303.4795ms
[debug]   Load.apply: load took 516.4828ms
[debug]   Load.apply: resolveProjects took 6.2459ms
[debug]   Load.apply: finalTransforms took 105.7797ms
[debug]   Load.apply: config.delegates took 5.3084ms
[debug]   Load.apply: Def.make(settings)... took 875.1823ms
[debug]   Load.apply: structureIndex took 88.9206ms
[debug]   Load.apply: mkStreams took 1.7457ms
[info] loading global plugins from C:\Users\udbha\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3053.1653ms
[debug]           Load.loadUnit: plugins took 23.9104ms
[debug]           Load.loadUnit: defsScala took 0.0032ms
[debug] [Loading] Scanning directory C:\Users\udbha\Documents\GitHub\Tokenizing-Text-in-Spark\project
[debug]             Load.loadUnit: mkEval took 5.966ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\udbha\Documents\GitHub\Tokenizing-Text-in-Spark\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 0.9855 ms
[info] loading settings for project tokenizing-text-in-spark-build from assembly.sbt,idea.sbt ...
[debug]               Load.resolveProject(tokenizing-text-in-spark-build) took 2.2388ms
[debug]             Load.loadTransitive: finalizeProject(Project(id tokenizing-text-in-spark-build, base: C:\Users\udbha\Documents\GitHub\Tokenizing-Text-in-Spark\project, plugins: List(<none>))) took 3.5665ms
[debug] [Loading] Done in C:\Users\udbha\Documents\GitHub\Tokenizing-Text-in-Spark\project, returning: (tokenizing-text-in-spark-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1979.5816ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.034ms
[debug]         Load.loadUnit(file:/C:/Users/udbha/Documents/GitHub/Tokenizing-Text-in-Spark/project/, ...) took 2010.3074ms
[debug]       Load.apply: load took 2011.5582ms
[debug]       Load.apply: resolveProjects took 0.0926ms
[debug]       Load.apply: finalTransforms took 10.5834ms
[debug]       Load.apply: config.delegates took 0.4561ms
[debug]       Load.apply: Def.make(settings)... took 83.936ms
[debug]       Load.apply: structureIndex took 26.3814ms
[debug]       Load.apply: mkStreams took 0.0029ms
[info] loading project definition from C:\Users\udbha\Documents\GitHub\Tokenizing-Text-in-Spark\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 4182.3247ms
[debug]     Load.loadUnit: defsScala took 0.0025ms
[debug] [Loading] Scanning directory C:\Users\udbha\Documents\GitHub\Tokenizing-Text-in-Spark
[debug]       Load.loadUnit: mkEval took 0.2148ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\udbha\Documents\GitHub\Tokenizing-Text-in-Spark, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbtassembly.AssemblyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbtassembly.AssemblyPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,sbtassembly.AssemblyPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.7239 ms
[info] loading settings for project tokenizing-text-in-spark from build.sbt ...
[debug]         Load.resolveProject(tokenizing-text-in-spark) took 23.6327ms
[debug]       Load.loadTransitive: finalizeProject(Project(id tokenizing-text-in-spark, base: C:\Users\udbha\Documents\GitHub\Tokenizing-Text-in-Spark, plugins: List(<none>))) took 26.4741ms
[debug] [Loading] Done in C:\Users\udbha\Documents\GitHub\Tokenizing-Text-in-Spark, returning: (tokenizing-text-in-spark)
[debug]     Load.loadUnit: loadedProjectsRaw took 1912.4038ms
[debug]     Load.loadUnit: cleanEvalClasses took 32.3806ms
[debug]   Load.loadUnit(file:/C:/Users/udbha/Documents/GitHub/Tokenizing-Text-in-Spark/, ...) took 6127.533ms
[debug] Load.apply: load took 6129.3026ms
[debug] Load.apply: resolveProjects took 0.0772ms
[debug] Load.apply: finalTransforms took 22.3044ms
[debug] Load.apply: config.delegates took 0.3555ms
[debug] Load.apply: Def.make(settings)... took 51.7535ms
[debug] Load.apply: structureIndex took 30.0226ms
[debug] Load.apply: mkStreams took 0.002ms
[info] set current project to Tokenizing_Text_in_Spark (in build file:/C:/Users/udbha/Documents/GitHub/Tokenizing-Text-in-Spark/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 50284 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 50284, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Tokenizing_Text_in_Spark (in build file:/C:/Users/udbha/Documents/GitHub/Tokenizing-Text-in-Spark/)
[debug] > Exec(idea-shell, None, None)
